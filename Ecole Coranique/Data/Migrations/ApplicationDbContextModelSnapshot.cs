// <auto-generated />
using System;
using Ecole_Coranique.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecole_Coranique.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ec")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecole_Coranique.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EtudiantId");

                    b.ToTable("Absences", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            Observation = "مشغول"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            Observation = "غير مبرر"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "شؤون عائلية"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "حركة المرور"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            Observation = "عرس"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            Observation = "مشغول"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            Observation = "غير مبرر"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            Observation = "غير مبرر"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            Observation = "خرجة عائلية"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            Observation = "نسيان"
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            Observation = "مراجعة إمتحان"
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            Observation = "تفرج مبارات"
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            Observation = "رحلة"
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "شؤون تجارية"
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "شؤون تجارية"
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            Observation = "غير مبرر"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Enseignant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enseignants", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "حي ثنية الحجر، المدية",
                            Email = "sli.mane@gmail.com",
                            Nom = "سليماني",
                            Phone = "05 10 10 10",
                            Prenom = "سليمان"
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "حي عين الذهب، المدية",
                            Email = "aliben@gmail.co",
                            Nom = "بن علي",
                            Phone = "05 20 20 20",
                            Prenom = "علي"
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "حي المصلى، المدية",
                            Email = "ss.bousahla@gmail.com",
                            Nom = "سنوسي",
                            Phone = "05 30 30 30",
                            Prenom = "سهيلة"
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "حي مرج الشكير، المدية",
                            Email = "amina.ben@gmail.com",
                            Nom = "بن يمينة",
                            Phone = "05 40 40 40",
                            Prenom = "أمينة"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Naissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupeId");

                    b.ToTable("Etudiants", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "حي تاكبو، المدية",
                            Email = "ahmed.mido@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(2001, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "بوحمد",
                            Phone = "05 01 01 01",
                            Prenom = "أحمد"
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "حي الزهور، بجاية",
                            Email = "arezki.rzk@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "بن رزقي",
                            Phone = "05 02 02 02",
                            Prenom = "أرزقي"
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "حى باب القواس، المدية",
                            Email = "amerrr@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(1963, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "بوعمر",
                            Phone = "05 03 03 03",
                            Prenom = "عمر"
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "مدينة الصخور، الرغاية",
                            Email = "so.sidou33@bmail.com",
                            GroupeId = 2,
                            Naissance = new DateTime(1990, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "سيدو",
                            Phone = "05 04 04 04",
                            Prenom = "سفيان"
                        },
                        new
                        {
                            Id = 5,
                            Adresse = "حي بولوغين، الجزائر العاصمة",
                            Email = "samimi@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(1998, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "سليمة",
                            Phone = "05 05 05 05",
                            Prenom = "سميحة"
                        },
                        new
                        {
                            Id = 6,
                            Adresse = "حي خمسة منازل، الجزائر العاصمة",
                            Email = "fati.bb@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(2005, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "بوفطوم",
                            Phone = "05 06 06 06",
                            Prenom = "فاطمة"
                        },
                        new
                        {
                            Id = 7,
                            Adresse = "طريق الأكاسيا، المدية",
                            Email = "bousemar.sam@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(1999, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "بو سمار",
                            Phone = "05 07 07 07",
                            Prenom = "سميرة"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnseignantId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnseignantId");

                    b.ToTable("Groupes", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnseignantId = 3,
                            Nom = "مجموعة البنات",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            EnseignantId = 4,
                            Nom = "مجموعة الصباح",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            EnseignantId = 1,
                            Nom = "مجموعة المساء",
                            Numero = 3
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Hizb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hizbs", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "( ٱلْحَمْدُ لِلَّهِ ) من الفاتحة (1:1) سورة البقرة (2:74)",
                            Nom = "الحزب 01",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "( واذا لقوا ) من سورة البقرة (2:75) إلى (2:141)",
                            Nom = "الحزب 02",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "( سيقول السفهاء ) من سورة البقرة (2:142) إلى (2:202)",
                            Nom = "الحزب 03",
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "( واذكرواالله ) من سورة البقرة (2:203) إلى (2:252)",
                            Nom = "الحزب 04",
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "( تلك الرسل ) من سورة البقرة (2:253) إلى سورة أل عمران (3:14)",
                            Nom = "الحزب 05",
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "( قل أؤنبئكم ) من سورة أل عمران (3:15) إلى (3:92)",
                            Nom = "الحزب 06",
                            Numero = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "( لن تنالوا ) من سورة أل عمران (3:93) إلى (3:170)",
                            Nom = "الحزب 07",
                            Numero = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "( كُلُّ الطَّعَامِ ) من سورة أل عمران (3:171) إلى سورة النساء (4:23)",
                            Nom = "الحزب 08",
                            Numero = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "( وَٱلْمُحْصَنَاتُ ) من سورة النساء (4:24) إلى (4:87)",
                            Nom = "الحزب 09",
                            Numero = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "( الله لااله الاهو ) من سورة النساء (4:88) إلى (4:147)",
                            Nom = "الحزب 10",
                            Numero = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "( لَا يُحِبُّ ٱللهُ ) من سورة النساء (4:148) إلى سورة المائدة (5:26)",
                            Nom = "الحزب 11",
                            Numero = 11
                        },
                        new
                        {
                            Id = 12,
                            Description = "( قال رجلان ) من سورة المائدة (5:27) إلى (5:81)",
                            Nom = "الحزب 12",
                            Numero = 12
                        },
                        new
                        {
                            Id = 13,
                            Description = "( لتجدن ) من سورة المائدة (5:82) - سورة الأنعام (6:35)",
                            Nom = "الحزب 13",
                            Numero = 13
                        },
                        new
                        {
                            Id = 14,
                            Description = "( انما يستجيب ) من سورة الأنعام (6:36) إلى (6:110)",
                            Nom = "الحزب 14",
                            Numero = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "( ولو أننا نزلنا ) من سورة الأنعام (6:111) إلى (6:165)",
                            Nom = "الحزب 15",
                            Numero = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "( المص كتب ) من سورة الأعراف (7:1) إلى (7:87)",
                            Nom = "الحزب 16",
                            Numero = 16
                        },
                        new
                        {
                            Id = 17,
                            Description = "( قال الملأ ) من سورة الأعراف (7:88) إلى (7:170)",
                            Nom = "الحزب 17",
                            Numero = 17
                        },
                        new
                        {
                            Id = 18,
                            Description = "( واذ نتقنا ) من سورة الأعراف (7:171) إلى سورة الأنفال (8:40)",
                            Nom = "الحزب 18",
                            Numero = 18
                        },
                        new
                        {
                            Id = 19,
                            Description = "( واعلموا ) من سورة الأنفال (8:41)  إلى سورة التوبة (9:33)",
                            Nom = "الحزب 19",
                            Numero = 19
                        },
                        new
                        {
                            Id = 20,
                            Description = "( ان كثيرا ) من سورة التوبة (9:34) إلى (9:92)",
                            Nom = "الحزب 20",
                            Numero = 20
                        },
                        new
                        {
                            Id = 21,
                            Description = "( انما السبيل ) من سورة التوبة (9:93) إلى سورة يونس (10:25)",
                            Nom = "الحزب 21",
                            Numero = 21
                        },
                        new
                        {
                            Id = 22,
                            Description = "( للذين أحسنوا ) من سورة يونس (10:26) إلى سورة هود (11:5)",
                            Nom = "الحزب 22",
                            Numero = 22
                        },
                        new
                        {
                            Id = 23,
                            Description = "( ومامن دابة ) من سورة هود (11:6) إلى (11:83)",
                            Nom = "الحزب 23",
                            Numero = 23
                        },
                        new
                        {
                            Id = 24,
                            Description = "( والى مدين ) من سورة هود (11:84) إلى سورة يوسف (12:52)",
                            Nom = "الحزب 24",
                            Numero = 24
                        },
                        new
                        {
                            Id = 25,
                            Description = "( وما أبرئ ) من سورة يوسف (12:53) إلى سورة الرعد (13:18)",
                            Nom = "الحزب 25",
                            Numero = 25
                        },
                        new
                        {
                            Id = 26,
                            Description = "( أفمن يعلم ) من سورة الرعد (13:19) إلى سورة إبراهيم (14:52)",
                            Nom = "الحزب 26",
                            Numero = 26
                        },
                        new
                        {
                            Id = 27,
                            Description = "( ربما ) من سورة الحجر (15:1) إلى سورة النحل (16:50)",
                            Nom = "الحزب 27",
                            Numero = 27
                        },
                        new
                        {
                            Id = 28,
                            Description = "( وقال الله لا تتخذوا ) من سورة النحل (16:51) إلى (16:128)",
                            Nom = "الحزب 28",
                            Numero = 28
                        },
                        new
                        {
                            Id = 29,
                            Description = "( سبحن ) من سورة الاسراء (17:1) إلى (17:98)",
                            Nom = "الحزب 29",
                            Numero = 29
                        },
                        new
                        {
                            Id = 30,
                            Description = "( أولم يروا ) من سورة الاسراء (17:99) إلى سورة الكهف (18:74)",
                            Nom = "الحزب 30",
                            Numero = 30
                        },
                        new
                        {
                            Id = 31,
                            Description = "( قال ألم أقل ) من سورة الكهف (18:75) إلى سورة مريم (19:98)",
                            Nom = "الحزب 31",
                            Numero = 31
                        },
                        new
                        {
                            Id = 32,
                            Description = "( طه ) من سورة طه (20:1) إلى (20:135)",
                            Nom = "الحزب 32",
                            Numero = 32
                        },
                        new
                        {
                            Id = 33,
                            Description = "( اقترب ) من سورة الأنبياء (21:1) إلى (21:112)",
                            Nom = "الحزب 33",
                            Numero = 33
                        },
                        new
                        {
                            Id = 34,
                            Description = "( يأيها الناس ) من سورة الحج (22:1) إلى (22:78)",
                            Nom = "الحزب 34",
                            Numero = 34
                        },
                        new
                        {
                            Id = 35,
                            Description = "( قدأفلح ) من سورة المؤمنون (23:1) إلى سورة النور (24:20)",
                            Nom = "الحزب 35",
                            Numero = 35
                        },
                        new
                        {
                            Id = 36,
                            Description = "( لاتتبعوا ) من سورة النور (24:21) إلى سورة الفرقان (25:20)",
                            Nom = "الحزب 36",
                            Numero = 36
                        },
                        new
                        {
                            Id = 37,
                            Description = "( وقال الذين ) من سورة الفرقان (25:21) إلى سورة الشعراء (26:110)",
                            Nom = "الحزب 37",
                            Numero = 37
                        },
                        new
                        {
                            Id = 38,
                            Description = "( قالوا أنومن ) من سورة الشعراء (26:111)  إلى سورة النمل (27:55)",
                            Nom = "الحزب 38",
                            Numero = 38
                        },
                        new
                        {
                            Id = 39,
                            Description = "( فما كان جواب ) من سورة النمل (27:56) إلى سورة اقصص (28:50)",
                            Nom = "الحزب 39",
                            Numero = 39
                        },
                        new
                        {
                            Id = 40,
                            Description = "( ولقد وصلنا ) من سورة القصص (28:51)  إلى سورة العنكبوت (29:45)",
                            Nom = "الحزب 40",
                            Numero = 40
                        },
                        new
                        {
                            Id = 41,
                            Description = "( ولا تجادلوا ) من سورة العنكبوت (29:46) إلى سورة لقمان (31:21)",
                            Nom = "الحزب 41",
                            Numero = 41
                        },
                        new
                        {
                            Id = 42,
                            Description = "( ومن يسلم ) من سورة لقمن (31:22) إلى سورة الأحزاب (33:30)",
                            Nom = "الحزب 42",
                            Numero = 42
                        },
                        new
                        {
                            Id = 43,
                            Description = "( ومن يقنت ) من سورة الأحزاب (33:31) إلى سورة سبأ (34:23)",
                            Nom = "الحزب 43",
                            Numero = 43
                        },
                        new
                        {
                            Id = 44,
                            Description = "( قل من يرزقكم ) من سورة سبأ (34:24) إلى سورة يس (36:27)",
                            Nom = "الحزب 44",
                            Numero = 44
                        },
                        new
                        {
                            Id = 45,
                            Description = "( وماأنزلنا ) من سورة يس (36:28) إلى سورة الصفت (37:144)",
                            Nom = "الحزب 45",
                            Numero = 45
                        },
                        new
                        {
                            Id = 46,
                            Description = "( فنبذنه ) من سورة الصفت (37:145) إلى سورة الزمر (39:31)",
                            Nom = "الحزب 46",
                            Numero = 46
                        },
                        new
                        {
                            Id = 47,
                            Description = "( فمن أظلم ) من سورة الزمر (39:32) إلى سورة غافر (40:40)",
                            Nom = "الحزب 47",
                            Numero = 47
                        },
                        new
                        {
                            Id = 48,
                            Description = "( ويقوم مالي ) من سورة غافر (40:41) إلى سورة فصلت (41:46)",
                            Nom = "الحزب 48",
                            Numero = 48
                        },
                        new
                        {
                            Id = 49,
                            Description = "( اليه يرد ) من سورة فصلت (41:47) إلى سورة الزخرف (43:23)",
                            Nom = "الحزب 49",
                            Numero = 49
                        },
                        new
                        {
                            Id = 50,
                            Description = "( قل أولوجئتكم ) من سورة الزخرف (43:24) إلى سورة الجاثية (45:37)",
                            Nom = "الحزب 50",
                            Numero = 50
                        },
                        new
                        {
                            Id = 51,
                            Description = "( حم ماخلقنا ) من سورة الأحقاف (46:1) إلى سورة الفتح (48:17)",
                            Nom = "الحزب 51",
                            Numero = 51
                        },
                        new
                        {
                            Id = 52,
                            Description = "( لقد رضي ) من سورة الفتح (48:18) إلى سورة الذريات (51:30)",
                            Nom = "الحزب 52",
                            Numero = 52
                        },
                        new
                        {
                            Id = 53,
                            Description = "( قال فما خطبكم ) من سورة الذريات (51:31) إلى القمر (54:55)",
                            Nom = "الحزب 53",
                            Numero = 53
                        },
                        new
                        {
                            Id = 54,
                            Description = "( الرحمن ) من سورة الرحمن (55:1) إلى سورة الحديد (57:29)",
                            Nom = "الحزب 54",
                            Numero = 54
                        },
                        new
                        {
                            Id = 55,
                            Description = "( قد سمع ) من سورة المجادلة (58:1) إلى سورة الصف (61:14)",
                            Nom = "الحزب 55",
                            Numero = 55
                        },
                        new
                        {
                            Id = 56,
                            Description = "( يسبح لله ) من سورة الجمعة (62:1) إلى سورة التحريم (66:12)",
                            Nom = "الحزب 56",
                            Numero = 56
                        },
                        new
                        {
                            Id = 57,
                            Description = "( تبرك الذي ) من سورة الملك (67:1) إلى سورة نوح (71:28)",
                            Nom = "الحزب 57",
                            Numero = 57
                        },
                        new
                        {
                            Id = 58,
                            Description = "( قل أوحي ) من سورة الجن (72:1) إلى سورة المرسلات (77:50)",
                            Nom = "الحزب 58",
                            Numero = 58
                        },
                        new
                        {
                            Id = 59,
                            Description = "( عم يتساءلون ) سورة النبأ (78:1) إلى الطارق (86:17)",
                            Nom = "الحزب 59",
                            Numero = 59
                        },
                        new
                        {
                            Id = 60,
                            Description = "( سبح ) من سورة الأعلى (87:1) إلى سورة الناس (114:6)",
                            Nom = "الحزب 60",
                            Numero = 60
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Huitieme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Huitiemes", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "الأول",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Nom = "الثاني",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Nom = "الثالث",
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Nom = "الرابع",
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Nom = "الخامس",
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Nom = "السادس",
                            Numero = 6
                        },
                        new
                        {
                            Id = 7,
                            Nom = "السابع",
                            Numero = 7
                        },
                        new
                        {
                            Id = 8,
                            Nom = "الثامن",
                            Numero = 8
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Revision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<int>("HizbId")
                        .HasColumnType("int");

                    b.Property<int>("HuitiemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EtudiantId");

                    b.HasIndex("HizbId");

                    b.HasIndex("HuitiemeId");

                    b.ToTable("Revisions", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 4
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "ec");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "ec");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "ec");

                    b.HasData(
                        new
                        {
                            Id = "166591b3-6b26-4c7b-9ae0-9d77cd7dcef4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0251199-555e-4ab7-be74-8eb5c20de876",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKX0DNW1r6Mw1T9dt8IPS0B9T56mBla228SQR8wVF4dTTC3KBXydTPtZXTk0LtM1CA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b079c4ed-face-4fed-be83-2d5dd9e1efce",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com"
                        },
                        new
                        {
                            Id = "13443be5-483c-4428-bd83-62f41ae1020f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "164b4946-eee8-4e91-9879-b89d1aebb513",
                            Email = "teacher@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EMAIL.COM",
                            NormalizedUserName = "TEACHER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEIgByJN2QFD2yj3QasTM8nIc71vDLY3blHRQqu9ghbXDYe4Sqp3z+lKZH7goL41Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c6dc9b5-9488-43dc-b943-9b2f9c296f4f",
                            TwoFactorEnabled = false,
                            UserName = "teacher@email.com"
                        },
                        new
                        {
                            Id = "4aab8ad2-2f32-41a6-942d-f606b89cfc88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07edb3bc-e438-48ad-995b-5fc6486b0097",
                            Email = "student@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@EMAIL.COM",
                            NormalizedUserName = "STUDENT@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIaQjHp0lxvVFhlvSuroKqlyI2dZCRNRNB4OFkHtTD1vKkDi7vN66dITDsQvupYbOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85f0ac7f-6058-4e02-a76a-9f07e3a7ba64",
                            TwoFactorEnabled = false,
                            UserName = "student@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "ec");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Concern",
                            ClaimValue = "Admin",
                            UserId = "166591b3-6b26-4c7b-9ae0-9d77cd7dcef4"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Concern",
                            ClaimValue = "Teacher",
                            UserId = "13443be5-483c-4428-bd83-62f41ae1020f"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Concern",
                            ClaimValue = "Student",
                            UserId = "4aab8ad2-2f32-41a6-942d-f606b89cfc88"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "ec");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "ec");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "ec");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Absence", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Etudiant", "Etudiant")
                        .WithMany("EtudiantAbsences")
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etudiant");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Groupe", "Groupe")
                        .WithMany("GroupeEtudiants")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Enseignant", "Enseignant")
                        .WithMany("EnseignantGroupes")
                        .HasForeignKey("EnseignantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enseignant");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Revision", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Etudiant", "Etudiant")
                        .WithMany("EtudiantRevisions")
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecole_Coranique.Models.Hizb", "Hizb")
                        .WithMany("HizbRevisions")
                        .HasForeignKey("HizbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecole_Coranique.Models.Huitieme", "Huitieme")
                        .WithMany("HuitiemeRevisions")
                        .HasForeignKey("HuitiemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etudiant");

                    b.Navigation("Hizb");

                    b.Navigation("Huitieme");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Enseignant", b =>
                {
                    b.Navigation("EnseignantGroupes");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.Navigation("EtudiantAbsences");

                    b.Navigation("EtudiantRevisions");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.Navigation("GroupeEtudiants");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Hizb", b =>
                {
                    b.Navigation("HizbRevisions");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Huitieme", b =>
                {
                    b.Navigation("HuitiemeRevisions");
                });
#pragma warning restore 612, 618
        }
    }
}
