// <auto-generated />
using System;
using Ecole_Coranique.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecole_Coranique.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220408193554_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Ecole_Coranique.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Absence");

                    b.HasIndex("EtudiantId");

                    b.ToTable("Absence", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "Occupé"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "Non justifié"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 5,
                            Observation = "Assistance maternelle"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            Observation = "Circulation"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            Observation = "Occupé"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Enseignant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Enseignant");

                    b.ToTable("Enseignant", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "Quartier Thniet el Hdjer, Médéa",
                            Email = "sli.mane@gmail.com",
                            Nom = "Benslimane",
                            Phone = "05 10 10 10",
                            Prenom = "Slimane"
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "Quartier Ain Dhheb, Médéa",
                            Email = "aliben@gmail.co",
                            Nom = "Benali",
                            Phone = "05 20 20 20",
                            Prenom = "Ali"
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "Quartier M'salah, Médéa",
                            Email = "ss.bousahla@gmail.com",
                            Nom = "Bousahla",
                            Phone = "05 30 30 30",
                            Prenom = "Souhila"
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "Quartier Merdj Echkir, Médéa",
                            Email = "amina.ben@gmail.com",
                            Nom = "Benyamina",
                            Phone = "05 40 40 40",
                            Prenom = "Amina"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Naissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Etudiant");

                    b.HasIndex("GroupeId");

                    b.ToTable("Etudiant", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "Quartier takbou, Médéa",
                            Email = "ahmed.mido@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(2001, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Bouhmed",
                            Phone = "05 01 01 01",
                            Prenom = "Ahmed"
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "Quartier des fleurs, Bejaia",
                            Email = "arezki.rzk@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(1978, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Benrezki",
                            Phone = "05 02 02 02",
                            Prenom = "Arezki"
                        },
                        new
                        {
                            Id = 3,
                            Adresse = "Quartier Bab el Kouas, Médéa",
                            Email = "amerrr@gmail.com",
                            GroupeId = 3,
                            Naissance = new DateTime(1963, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Bouamer",
                            Phone = "05 03 03 03",
                            Prenom = "Amer"
                        },
                        new
                        {
                            Id = 4,
                            Adresse = "Cité des roches, Réghaia",
                            Email = "so.sidou33@bmail.com",
                            GroupeId = 2,
                            Naissance = new DateTime(1990, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Sidou",
                            Phone = "05 04 04 04",
                            Prenom = "Sofiane"
                        },
                        new
                        {
                            Id = 5,
                            Adresse = "Quartier bouloughine, Alger",
                            Email = "samimi@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(1998, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Smihi",
                            Phone = "05 05 05 05",
                            Prenom = "Samiha"
                        },
                        new
                        {
                            Id = 6,
                            Adresse = "Cité des cinq, Belcourt",
                            Email = "fati.bb@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(2005, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Boufetoum",
                            Phone = "05 06 06 06",
                            Prenom = "Fatima"
                        },
                        new
                        {
                            Id = 7,
                            Adresse = "Route des accacias, Médéa",
                            Email = "bousemar.sam@gmail.com",
                            GroupeId = 1,
                            Naissance = new DateTime(1999, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nom = "Bousemar",
                            Phone = "05 07 07 07",
                            Prenom = "Samira"
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnseignantId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Groupe");

                    b.HasIndex("EnseignantId");

                    b.ToTable("Groupe", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnseignantId = 3,
                            Nom = "Groupe filles",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            EnseignantId = 4,
                            Nom = "Groupe matin",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            EnseignantId = 1,
                            Nom = "Groupe après-midi",
                            Numero = 3
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Hizb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Hizb");

                    b.ToTable("Hizb", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "الحزب 01 - ( الم ذلك ) من سورة البقرة",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Nom = "الحزب 02 - ( واذا لقوا ) من سورة البقرة",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Nom = "الحزب 03 - ( سيقولالسفهاء ) من سورة البقرة",
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Nom = "الحزب 04 - ( واذكرواالله ) من سورة البقرة",
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Nom = "الحزب 05 - ( تلك الرسل ) من سورة البقرة - سورة أل عمران",
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Nom = "الحزب 06 - ( قل أؤنبئكم ) من سورة أل عمران",
                            Numero = 6
                        },
                        new
                        {
                            Id = 7,
                            Nom = "الحزب 07 - ( لن تنالوا ) من سورة أل عمران",
                            Numero = 7
                        },
                        new
                        {
                            Id = 8,
                            Nom = "الحزب 08 - ( يستبشرون ) من سورة أل عمران - سورة النساء",
                            Numero = 8
                        },
                        new
                        {
                            Id = 9,
                            Nom = "الحزب 09 -( والمحصنات ) من سورة النساء",
                            Numero = 9
                        },
                        new
                        {
                            Id = 10,
                            Nom = "الحزب 10 - ( الله لااله الاهو ) من سورة النساء",
                            Numero = 10
                        },
                        new
                        {
                            Id = 11,
                            Nom = "الحزب 11 - ( لا يحب ) من سورة النساء - سورة المائدة",
                            Numero = 11
                        },
                        new
                        {
                            Id = 12,
                            Nom = "الحزب 12 - ( قال رجلان ) من سورة المائدة",
                            Numero = 12
                        },
                        new
                        {
                            Id = 13,
                            Nom = "الحزب 13 - ( لتجدن ) من سورة المائدة - سورة الأنعام",
                            Numero = 13
                        },
                        new
                        {
                            Id = 14,
                            Nom = "الحزب 14 - ( انما يستجيب ) من سورة الأنعام",
                            Numero = 14
                        },
                        new
                        {
                            Id = 15,
                            Nom = "الحزب 15 - ( ولو أننا نزلنا ) من سورة الأنعام",
                            Numero = 15
                        },
                        new
                        {
                            Id = 16,
                            Nom = "الحزب 16 - ( المص كتب ) من سورة الأعراف",
                            Numero = 16
                        },
                        new
                        {
                            Id = 17,
                            Nom = "الحزب 17 - ( قال الملأ ) من سورة الأعراف",
                            Numero = 17
                        },
                        new
                        {
                            Id = 18,
                            Nom = "الحزب 18 - ( واذ نتقنا ) من سورة الأعراف - سورة الأنفال",
                            Numero = 18
                        },
                        new
                        {
                            Id = 19,
                            Nom = "الحزب 19 - ( واعلموا ) من سورة الأنفال - سورة التوبة",
                            Numero = 19
                        },
                        new
                        {
                            Id = 20,
                            Nom = "الحزب 20 - ( ان كثيرا ) من سورة التوبة",
                            Numero = 20
                        },
                        new
                        {
                            Id = 21,
                            Nom = "الحزب 21 - ( انما السبيل ) من سورة التوبة - سورة يونس",
                            Numero = 21
                        },
                        new
                        {
                            Id = 22,
                            Nom = "الحزب 22 - ( للذين أحسنوا ) من سورة يونس - سورة هود",
                            Numero = 22
                        },
                        new
                        {
                            Id = 23,
                            Nom = "الحزب 23 - ( ومامن دابة ) من سورة هود",
                            Numero = 23
                        },
                        new
                        {
                            Id = 24,
                            Nom = "الحزب 24 - ( والى مدين ) من سورة هود - سورة يوسف",
                            Numero = 24
                        },
                        new
                        {
                            Id = 25,
                            Nom = "الحزب 25 - ( وما أبرئ ) من سورة يوسف - سورة الرعد",
                            Numero = 25
                        },
                        new
                        {
                            Id = 26,
                            Nom = "الحزب 26 - ( أفمن يعلم ) من سورة الرعد - سورة ابراهيم",
                            Numero = 26
                        },
                        new
                        {
                            Id = 27,
                            Nom = "الحزب 27 - ( ربما ) من سورة الحجر - سورة النحل",
                            Numero = 27
                        },
                        new
                        {
                            Id = 28,
                            Nom = "الحزب 28 - ( وقال الله لا تتخذوا ) من سورة النحل",
                            Numero = 28
                        },
                        new
                        {
                            Id = 29,
                            Nom = "الحزب 29 - ( سبحن ) من سورة الاسراء",
                            Numero = 29
                        },
                        new
                        {
                            Id = 30,
                            Nom = "الحزب 30 - ( أولم يروا ) من سورة الاسراء - سورة الكهف",
                            Numero = 30
                        },
                        new
                        {
                            Id = 31,
                            Nom = "الحزب 31 - ( قال ألم أقل ) من سورة الكهف - سورة مريم",
                            Numero = 31
                        },
                        new
                        {
                            Id = 32,
                            Nom = "الحزب 32 - ( طه ) من سورة طه",
                            Numero = 32
                        },
                        new
                        {
                            Id = 33,
                            Nom = "الحزب 33 - ( اقترب ) من سورة الأنبياء",
                            Numero = 33
                        },
                        new
                        {
                            Id = 34,
                            Nom = "الحزب 34 - ( يأيها الناس ) من سورة الحج",
                            Numero = 34
                        },
                        new
                        {
                            Id = 35,
                            Nom = "الحزب 35 - ( قدأفلح ) من سورة المومنون - سورة النور",
                            Numero = 35
                        },
                        new
                        {
                            Id = 36,
                            Nom = "الحزب 36 - ( لاتتبعوا ) من سورة النور - سورة الفرقان",
                            Numero = 36
                        },
                        new
                        {
                            Id = 37,
                            Nom = "الحزب 37 - ( وقال الذين ) من سورة الفرقان - سورة الشعراء",
                            Numero = 37
                        },
                        new
                        {
                            Id = 38,
                            Nom = "الحزب 38 - ( قالوا أنومن ) من سورة الشعراء - سورة النمل",
                            Numero = 38
                        },
                        new
                        {
                            Id = 39,
                            Nom = "الحزب 39 - ( فما كان جواب ) من سورة النمل - سورة اقصص",
                            Numero = 39
                        },
                        new
                        {
                            Id = 40,
                            Nom = "الحزب 40 - ( ولقد وصلنا ) من سورة القصص - سورة العنكبوت",
                            Numero = 40
                        },
                        new
                        {
                            Id = 41,
                            Nom = "الحزب 41 - ( ولا تجادلوا ) من سورة العنكبوت - سورة الروم - سورة لقمن",
                            Numero = 41
                        },
                        new
                        {
                            Id = 42,
                            Nom = "الحزب 42 - ( ومن يسلم ) من سورة لقمن - سورة السجدة - سورة الأحزاب",
                            Numero = 42
                        },
                        new
                        {
                            Id = 43,
                            Nom = "الحزب 43 - ( ومن يقنت ) من سورة الأحزاب - سورة سبأ",
                            Numero = 43
                        },
                        new
                        {
                            Id = 44,
                            Nom = "الحزب 44 - ( قل من يرزقكم ) من سورة سبأ - سورة فاطر - سورة يس",
                            Numero = 44
                        },
                        new
                        {
                            Id = 45,
                            Nom = "الحزب 45 - ( وماأنزلنا ) من سورة يس - سورة الصفت",
                            Numero = 45
                        },
                        new
                        {
                            Id = 46,
                            Nom = "الحزب 46 - ( فنبذنه ) من سورة الصفت الى سورة ص الى سورة الزمر",
                            Numero = 46
                        },
                        new
                        {
                            Id = 47,
                            Nom = "الحزب 47 - ( فمن أظلم ) من سورة الزمر - سورة غافر",
                            Numero = 47
                        },
                        new
                        {
                            Id = 48,
                            Nom = "الحزب 48 - ( ويقوم مالي ) من سورة غافر - سورة فصلت",
                            Numero = 48
                        },
                        new
                        {
                            Id = 49,
                            Nom = "الحزب 49 - ( اليه يرد ) من سورة فصلت - سورة الشورى - سورة الزخرف",
                            Numero = 49
                        },
                        new
                        {
                            Id = 50,
                            Nom = "الحزب 50 - ( قل أولوجئتكم ) من سورة الزخرف - سورة الدخان - سورة الجاثية",
                            Numero = 50
                        },
                        new
                        {
                            Id = 51,
                            Nom = "الحزب 51 - ( حم ماخلقنا ) من سورة الأحقاف الىسورة محمد - سورة الفتح",
                            Numero = 51
                        },
                        new
                        {
                            Id = 52,
                            Nom = "الحزب 52 - ( لقد رضي ) من سورة الفتح - سورة :سورة الحجرات - سورة ق - سورة الذريات",
                            Numero = 52
                        },
                        new
                        {
                            Id = 53,
                            Nom = "الحزب 53 - ( قال فما خطبكم ) من سورة الذريات - سورة الطور - سورة النجم - سورة القمر",
                            Numero = 53
                        },
                        new
                        {
                            Id = 54,
                            Nom = "الحزب 54 - ( الرحمن ) من سورة الرحمن - سورة الواقعة - سورة الحديد",
                            Numero = 54
                        },
                        new
                        {
                            Id = 55,
                            Nom = "الحزب 55 - ( قد سمع ) من سورة المجادلة - سورة الحشر - سورة الممتحنة - سورة الصف",
                            Numero = 55
                        },
                        new
                        {
                            Id = 56,
                            Nom = "الحزب 56 - ( يسبح لله ) من سورة الجمعة - سورة المنفقون - سورة التغابن - سورة الطلاق - سورة التحريم",
                            Numero = 56
                        },
                        new
                        {
                            Id = 57,
                            Nom = "الحزب 57 - ( تبرك الذي ) من سورة الملك - سورة القلم - سورة الحاقة - سورة المعارج - سورة نوح",
                            Numero = 57
                        },
                        new
                        {
                            Id = 58,
                            Nom = "الحزب 58 - ( قل أوحي ) من سورة الجن - سورة المزمل - سورة المدثر - سورة القيمة - سورة الانسان - سورة المرسلات",
                            Numero = 58
                        },
                        new
                        {
                            Id = 59,
                            Nom = "الحزب 59 - ( عم يتساءلون ) سورة النبأ - النزعات - عبس - التكوير - الانفطار - المطففين - الانشقاق - البروج - الطارق",
                            Numero = 59
                        },
                        new
                        {
                            Id = 60,
                            Nom = "الحزب 60 - ( سبح ) من سورة الأعلى الى سورة الناس",
                            Numero = 60
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Huitieme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Huitieme");

                    b.ToTable("Huitieme", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "الأول",
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Nom = "الثاني",
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Nom = "الثالث",
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Nom = "الرابع",
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Nom = "الخامس",
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Nom = "السادس",
                            Numero = 6
                        },
                        new
                        {
                            Id = 7,
                            Nom = "السابع",
                            Numero = 7
                        },
                        new
                        {
                            Id = 8,
                            Nom = "الثامن",
                            Numero = 8
                        });
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Revision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EtudiantId")
                        .HasColumnType("int");

                    b.Property<int>("HizbId")
                        .HasColumnType("int");

                    b.Property<int>("HuitiemeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Revision");

                    b.HasIndex("EtudiantId");

                    b.HasIndex("HizbId");

                    b.HasIndex("HuitiemeId");

                    b.ToTable("Revision", "Ecole_Coranique");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 1,
                            HizbId = 1,
                            HuitiemeId = 2
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 2,
                            HizbId = 1,
                            HuitiemeId = 4
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 3,
                            HizbId = 1,
                            HuitiemeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EtudiantId = 4,
                            HizbId = 1,
                            HuitiemeId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73841e2d-15a3-47a3-a6eb-e76b04614cbc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f050bb6-101b-4f31-ad78-1e8f5efa8cd7",
                            Email = "manager@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EMAIL.COM",
                            NormalizedUserName = "MANAGER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE1tWtDhUIUUpZ2+jE8titfIKVQUndKlFnO7GnE1bQKtW71OoHFgWoyHUKvtYFENAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6deca103-6838-4639-9aca-d1b665d8b858",
                            TwoFactorEnabled = false,
                            UserName = "manager@email.com"
                        },
                        new
                        {
                            Id = "22a1995d-7000-4d96-b40d-0b9f42973836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bf36c32-76f1-4db4-871f-6287e1683a31",
                            Email = "basic@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASIC@EMAIL.COM",
                            NormalizedUserName = "BASIC@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8G0tK6X0chJWxGfjwxWxmneCVsik7cVj358bCvuF+1gslaaKvHVKOvaX0/KMlGNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c39b0b2-f16b-45fc-b36e-4f1571219c54",
                            TwoFactorEnabled = false,
                            UserName = "basic@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Manager",
                            ClaimValue = "true",
                            UserId = "73841e2d-15a3-47a3-a6eb-e76b04614cbc"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Basic user",
                            ClaimValue = "true",
                            UserId = "22a1995d-7000-4d96-b40d-0b9f42973836"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Absence", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Etudiant", "Etudiant")
                        .WithMany("EtudiantAbsences")
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etudiant");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Groupe", "Groupe")
                        .WithMany("GroupeEtudiants")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Enseignant", "Enseignant")
                        .WithMany("EnseignantGroupes")
                        .HasForeignKey("EnseignantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enseignant");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Revision", b =>
                {
                    b.HasOne("Ecole_Coranique.Models.Etudiant", "Etudiant")
                        .WithMany("EtudiantRevisions")
                        .HasForeignKey("EtudiantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecole_Coranique.Models.Hizb", "Hizb")
                        .WithMany("HizbRevisions")
                        .HasForeignKey("HizbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecole_Coranique.Models.Huitieme", "Huitieme")
                        .WithMany("HuitiemeRevisions")
                        .HasForeignKey("HuitiemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etudiant");

                    b.Navigation("Hizb");

                    b.Navigation("Huitieme");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Enseignant", b =>
                {
                    b.Navigation("EnseignantGroupes");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Etudiant", b =>
                {
                    b.Navigation("EtudiantAbsences");

                    b.Navigation("EtudiantRevisions");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Groupe", b =>
                {
                    b.Navigation("GroupeEtudiants");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Hizb", b =>
                {
                    b.Navigation("HizbRevisions");
                });

            modelBuilder.Entity("Ecole_Coranique.Models.Huitieme", b =>
                {
                    b.Navigation("HuitiemeRevisions");
                });
#pragma warning restore 612, 618
        }
    }
}
